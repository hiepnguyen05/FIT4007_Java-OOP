import java.util.Locale;
import java.text.NumberFormat;
public class Account {
    // Hằng số lãi suất
    private static final double INTEREST_RATE = 0.035;

    // Thuộc tính
    private long accountNumber;
    private String accountName;
    private double accountBalance;

    // Constructor mặc định
    public Account() {
        this.accountNumber = 0;
        this.accountName = "";
        this.accountBalance = 0.0;
    }

    // Constructor đầy đủ tham số
    public Account(long accountNumber, String accountName, double accountBalance) {
        this.accountNumber = accountNumber;
        this.accountName = accountName;
        this.accountBalance = accountBalance;
    }

    // Constructor có 2 đối số: số tài khoản, tên tài khoản, số tiền mặc định là 50
    public Account(long accountNumber, String accountName) {
        this.accountNumber = accountNumber;
        this.accountName = accountName;
        this.accountBalance = 50.0; // Khởi tạo mặc định
    }

    // Getter và Setter cho từng thuộc tính
    public long getAccountNumber() {
        return accountNumber;
    }

    public void setAccountNumber(long accountNumber) {
        this.accountNumber = accountNumber;
    }

    public String getAccountName() {
        return accountName;
    }

    public void setAccountName(String accountName) {
        this.accountName = accountName;
    }

    public double getAccountBalance() {
        return accountBalance;
    }

    public void setAccountBalance(double accountBalance) {
        this.accountBalance = accountBalance;
    }

    // Phương thức nạp tiền
    public void deposit(double amount) {
        if (amount > 0) {
            accountBalance += amount;
            System.out.println("Nạp tiền thành công!");
        } else {
            System.out.println("Số tiền nạp không hợp lệ!");
        }
    }

    // Phương thức rút tiền, kiểm tra nếu số dư không đủ
    public void withdraw(double amount, double fee) {
        if (amount + fee > accountBalance) {
            System.out.println("Số dư không đủ để rút tiền!");
        } else if (amount <= 0 || fee < 0) {
            System.out.println("Số tiền rút hoặc phí không hợp lệ!");
        } else {
            accountBalance -= (amount + fee);
            System.out.println("Rút tiền thành công!");
        }
    }

    // Phương thức đáo hạn (tính lãi suất)
    public void mature() {
        accountBalance += accountBalance * INTEREST_RATE;
        System.out.println("Đã cộng lãi suất vào tài khoản!");
    }

    // Phương thức chuyển khoản
    public void transfer(Account toAccount, double amount) {
        if (amount > 0 && amount <= this.accountBalance) {
            this.accountBalance -= amount;
            toAccount.deposit(amount);
            System.out.println("Chuyển khoản thành công!");
        } else {
            System.out.println("Số tiền chuyển không hợp lệ hoặc không đủ!");
        }
    }

    // Phương thức toString để trả về chuỗi chứa toàn bộ thông tin tài khoản, định dạng tiền tệ
    @Override
    public String toString() {
        Locale locale = new Locale("vi", "VN");
        NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(locale);
        return "Account Number: " + accountNumber + "\n" +
                "Account Name: " + accountName + "\n" +
                "Account Balance: " + currencyFormat.format(accountBalance);
    }
}
